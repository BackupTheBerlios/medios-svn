GCCFLAGS = -Wall  -nostdlib -fno-builtin  -mcpu=arm7tdmi -O2
#-Os -mlong-calls 

#GCCFLAGS +=   -fomit-frame-pointer -fno-strict-aliasing


ASFLAGS = -mfpu=softfpa


GCCFLAGS += -D$(TARGET_DEVICE)
ASFLAGS  += --defsym $(TARGET_DEVICE)=1

ifeq ($(CHK_BAT_POWER),1)
	GCCFLAGS += -DCHK_BAT_POWER
endif

ifeq ($(HAVE_EXT_MODULE),1)
	GCCFLAGS += -DHAVE_EXT_MODULE
else
	HAVE_DVR = 0    
endif

ifeq ($(HAVE_DVR),1)
	GCCFLAGS += -DHAVE_DVR
endif

ifeq ($(HAVE_FM_REMOTE),1)
	GCCFLAGS += -DHAVE_FM_REMOTE
endif

ifeq ($(HAVE_MAS_SOUND),1)
	GCCFLAGS += -DHAVE_MAS_SOUND
endif

ifeq ($(HAVE_AIC23_SOUND),1)
	GCCFLAGS += -DHAVE_AIC23_SOUND
endif

ifeq ($(CHK_USB_FW),1)
	GCCFLAGS += -DCHK_USB_FW
endif
                                          
ifeq ($(HAVE_CMD_LINE),1)
	GCCFLAGS += -DHAVE_CMD_LINE
endif

#ifeq ($(HAVE_DEBUG_ON_SCREEN),1)
#	GCCFLAGS += -DHAVE_DEBUG_ON_SCREEN
#endif

ifeq ($(HAVE_EVT),1)
	GCCFLAGS += -DHAVE_EVT
endif


# Font definition:
FONT_LIST = 4x6 5x8 6x9 7x13 8x13 

TOOL=arm-linux-uclibc
GCC=$(TOOL)-gcc
AS=$(TOOL)-as
LD=$(TOOL)-ld
OBJCOPY= $(TOOL)-objcopy
RM=rm
AR=$(TOOL)-ar
RANLIB=$(TOOL)-ranlib
ELF2FLT=arm-linux-elf2flt
